name: k3s-router

on: [push]

env:
  REGISTRY: ghcr.io
  LOCAL_REGISTRY: registry.localhost:5000

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: turing-e2e
      ISTIO_VERSION: 1.9.9
      KNATIVE_VERSION: 0.18.3
      KNATIVE_ISTIO_VERSION: 0.18.1
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: "Setup local k8s cluster"
        id: single-cluster
        uses: AbsaOSS/k3d-action@v1.5.0
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          args: >-
            --servers 1
            --agents 3
            --port 80:80@loadbalancer
            --k3s-server-arg "--no-deploy=traefik,metrics-server"

      - name: "Install Istio"
        working-directory: .github/workflows-resources
        run: |
          curl -L https://istio.io/downloadIstio | sh -
          export PATH=$PWD/istio-${{ env.ISTIO_VERSION }}/bin:$PATH
          echo "y" | istioctl install -f istio-minimal-operator.yaml

      - name: "Install Knative with Istio Controller"
        run: |
          kubectl apply \
            -f https://github.com/knative/serving/releases/download/v${{ env.KNATIVE_VERSION }}/serving-crds.yaml
          kubectl apply \
            -f https://github.com/knative/serving/releases/download/v${{ env.KNATIVE_VERSION }}/serving-core.yaml

          kubectl apply \
            -f https://github.com/knative/net-istio/releases/download/v${{ env.KNATIVE_ISTIO_VERSION }}/net-istio.yaml

          kubectl -n knative-serving patch configmap/config-domain \
            --type merge -p '{"data":{"127.0.0.1.nip.io":""}}'

          kubectl -n knative-serving patch configmap/config-deployment \
            --type merge -p '{"data":{"registriesSkippingTagResolving": "${{ env.LOCAL_REGISTRY }}"}}'



      - name: "Deploy mockserver"
        working-directory: .github/workflows-resources
        run: |
          kubectl apply \
            -f turing.mockserver.yaml
          kubectl apply \
            -f mockserver.ingress.yaml

      - name: "Deploy Router"
        env:
          REPLICA_COUNT: 1
        run: |
          helm install turing ./charts/turing-router-load-test \
            --set turing.router.image.tag=0.0.0-build.1-e8ee033 \
            --set turing.router.image.registry=ghcr.io/romanwozniak/turing/ \
            --set turing.router.minReplica=${{ env.REPLICA_COUNT }} \
            --set turing.router.maxReplica=${{ env.REPLICA_COUNT }} \
            --set turing.enricher.enabled=false \
            --set turing.enricher.image.repository=kennethreitz/httpbin \
            --set turing.enricher.image.tag=latest \
            --set turing.enricher.minReplica=${{ env.REPLICA_COUNT }} \
            --set turing.enricher.maxReplica=${{ env.REPLICA_COUNT }} \
            --set turing.ensembler.enabled=false \
            --set turing.ensembler.image.repository=kennethreitz/httpbin \
            --set turing.ensembler.image.tag=latest \
            --set turing.ensembler.minReplica=${{ env.REPLICA_COUNT }} \
            --set turing.ensembler.maxReplica=${{ env.REPLICA_COUNT }} \
            --set turing.logging.level=INFO \
            --set control.image.repository=kennethreitz/httpbin \
            --set control.image.tag=latest \
            --set modelA.image.repository=kennethreitz/httpbin \
            --set modelA.image.tag=latest \
            --set control.replicaCount=${{ env.REPLICA_COUNT }} \
            --set modelA.replicaCount=${{ env.REPLICA_COUNT }} \
            --wait

      - run: sleep 15

      - uses: jupyterhub/action-k8s-await-workloads@v1
        id: wait-for-deployment
        with:
          timeout: 120 #seconds
          max-restarts: -1

      - if: always()
        run: |
          kubectl logs -l app=turing-router-1 -c user-container

          echo "::group::deployment"
          kubectl get deployment -l "serving.knative.dev/service=turing-router" --output yaml
          echo "::endgroup::"

          echo "::group::fiber config"
          kubectl get cm/turing-router-1 -o yaml
          echo "::endgroup::"

          echo "::group::describe ksvc"
          kubectl describe ksvc turing-router
          echo "::endgroup::"

          kubectl get kservice

      - run: |
          timeout --foreground 45 bash -c \
            "until curl -v --fail -H \"Content-Type: application/json\" -X POST -d '{\"hello\": \"world\"}' http://turing-router.default.127.0.0.1.nip.io/v1/predict; do sleep 2; done"

      - if: always()
        run: |
          kubectl logs -l app=turing-router-1 -c user-container
          kubectl describe pods -l app=turing-router-1
          kubectl get kservice

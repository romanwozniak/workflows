name: k3s

on: [push]

env:
  REGISTRY: ghcr.io
  TURING_VERSION: 0.0.0-build.1-164b88c
  MLP_VERSION: 1.4.14
  MERLIN_VERSION: 0.7.0
  LOCAL_REGISTRY: registry.localhost:5000

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: turing-e2e
      ISTIO_VERSION: 1.9.9
      KNATIVE_VERSION: 0.18.3
      KNATIVE_ISTIO_VERSION: 0.18.1
      VAULT_VERSION: 1.8.4
      VAULT_CHART_VERSION: 0.7.0
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: "Setup local k8s cluster"
        id: single-cluster
        uses: AbsaOSS/k3d-action@v1.5.0
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          args: >-
            --servers 1
            --agents 1
            --port 80:80@loadbalancer
            --k3s-server-arg "--no-deploy=traefik,metrics-server"

      - run: |
          k3d kubeconfig get ${{ env.CLUSTER_NAME }}
          echo "some text"

      - name: "Install Istio"
        working-directory: .github/workflows-resources
        run: |
          curl -L https://istio.io/downloadIstio | sh -
          export PATH=$PWD/istio-${{ env.ISTIO_VERSION }}/bin:$PATH
          echo "y" | istioctl install -f istio-minimal-operator.yaml

      - name: "Install Knative with Istio Controller"
        run: |
          kubectl apply \
            -f https://github.com/knative/serving/releases/download/v${{ env.KNATIVE_VERSION }}/serving-crds.yaml
          kubectl apply \
            -f https://github.com/knative/serving/releases/download/v${{ env.KNATIVE_VERSION }}/serving-core.yaml

          kubectl apply \
            -f https://github.com/knative/net-istio/releases/download/v${{ env.KNATIVE_ISTIO_VERSION }}/net-istio.yaml

          kubectl -n knative-serving patch configmap/config-domain \
            --type merge -p '{"data":{"127.0.0.1.nip.io":""}}'

          kubectl -n knative-serving patch configmap/config-deployment \
            --type merge -p '{"data":{"registriesSkippingTagResolving": "${{ env.LOCAL_REGISTRY }}"}}'

      - name: "Install Vault"
        run: |
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm install vault hashicorp/vault \
            --version=${{ env.VAULT_CHART_VERSION }} \
            --values vault.helm-values.yaml \
            --wait

          kubectl apply -f vault.ingress.yaml

      - name: "Deploy mockserver"
        working-directory: .github/workflows-resources
        run: |
          kubectl apply \
            -f turing.mockserver.yaml
          kubectl apply \
            -f mockserver.ingress.yaml

      - uses: actions/checkout@v2
        with:
          repository: gojek/mlp
          ref: v${{ env.MLP_VERSION }}
          path: mlp

      - uses: actions/checkout@v2
        with:
          repository: gojek/merlin
          ref: v${{ env.MERLIN_VERSION }}
          path: merlin

      - run: |
          helm install mlp ./mlp/charts/mlp \
            --set mlp.image.tag=v${{ env.MLP_VERSION }} \
            --values mlp.helm-values.yaml

          kubectl apply -f .github/workflows-resources/mlp.ingress.yaml

      - name: Prepare Vault secret for Merlin
        env:
          VAULT_ADDR: http://vault.127.0.0.1.nip.io
          VAULT_TOKEN: root
        run: |
          # Install Vault CLI
          wget -q https://releases.hashicorp.com/vault/${{ env.VAULT_VERSION }}/vault_${{ env.VAULT_VERSION }}_linux_amd64.zip \
          && unzip vault_${{ env.VAULT_VERSION }}_linux_amd64.zip \
          && rm vault_${{ env.VAULT_VERSION }}_linux_amd64.zip
          export PATH=$PWD:$PATH

          # Wait until Istio Ingress controller is ready to serve the new rule
          # timeout --foreground 45 bash -c \
          #   "until curl -v -s --fail http://vault.127.0.0.1.nip.io/v1/; do sleep 2; done"

          timeout --foreground 45 bash -c \
            'until curl -v -H "X-Vault-Token: ${{ env.VAULT_TOKEN }}" -X LIST  http://vault.127.0.0.1.nip.io/v1/secret/; do sleep 2; done'

          cat <<EOF > credentials.json
          {
            "master_ip": "kubernetes:443",
            "certs": "$(k3d kubeconfig get ${{ env.CLUSTER_NAME }} | yq e '.clusters[0].cluster.certificate-authority-data' - | base64 --decode | awk 1 ORS='\\n')",
            "client_certificate": "$(k3d kubeconfig get ${{ env.CLUSTER_NAME }} | yq e '.users[0].user.client-certificate-data' - | base64 --decode | awk 1 ORS='\\n')",
            "client_key": "$(k3d kubeconfig get ${{ env.CLUSTER_NAME }} | yq e '.users[0].user.client-key-data' - | base64 --decode | awk 1 ORS='\\n')"
          }
          EOF

          cat credentials.json

          curl -v \
            -H "X-Vault-Token: ${{ env.VAULT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            --data-binary @credentials.json \
            http://vault.127.0.0.1.nip.io/v1/secret/k3d-${{ env.CLUSTER_NAME }}

          vault kv get secret/k3d-${{ env.CLUSTER_NAME }}

      - name: Install Merlin
        run: |
          kubectl create secret generic vault-secret \
              --from-literal=address=http://vault:8200 \
              --from-literal=token=root

          helm install merlin ./merlin/charts/merlin \
            --set merlin.image.tag=v${{ env.MERLIN_VERSION }} \
            --set merlin.environmentConfigs[0].cluster=k3d-${{ env.CLUSTER_NAME }} \
            --set merlin.imageBuilder.clusterName=k3d-${{ env.CLUSTER_NAME }} \
            --values merlin.helm-values.yaml

          kubectl apply -f merlin.ingress.yaml

      - uses: jupyterhub/action-k8s-await-workloads@v1
        with:
          workloads: >-
            deployment/mlp,
            deployment/merlin,
            deployment/mockserver
          timeout: 300 #seconds
          max-restarts: -1

      - if: ${{ failure() }}
        run: |
          kubectl get deployment/merlin -o yaml

      - run: |
          timeout --foreground 45 bash -c \
            "until curl -v -s --fail http://mockserver.127.0.0.1.nip.io/control; do sleep 2; done"

          timeout --foreground 45 bash -c \
            "until curl -v -s --fail http://merlin.127.0.0.1.nip.io/v1/projects; do sleep 2; done"




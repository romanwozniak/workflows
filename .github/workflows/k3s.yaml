name: k3s

on: [push]

env:
  REGISTRY: ghcr.io
  TURING_VERSION: 0.0.0-build.1-164b88c
  MLP_VERSION: v1.4.14
  LOCAL_REGISTRY: registry.localhost:5000

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: turing-e2e
      ISTIO_VERSION: 1.9.9
      KNATIVE_VERSION: 0.18.3
      KNATIVE_ISTIO_VERSION: 0.18.1
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: "Setup local k8s cluster"
        id: single-cluster
        uses: AbsaOSS/k3d-action@v1.5.0
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          use-default-registry: true
          args: >-
            --servers 1
            --agents 2
            --port 80:80@loadbalancer
            --k3s-server-arg "--no-deploy=traefik,metrics-server"

      - run: |
          k3d kubeconfig get ${{ env.CLUSTER_NAME }}
          echo "some text"

      - name: "Install Istio"
        working-directory: .github/workflows-resources
        run: |
          curl -L https://istio.io/downloadIstio | sh -
          export PATH=$PWD/istio-${{ env.ISTIO_VERSION }}/bin:$PATH
          echo "y" | istioctl install -f istio-minimal-operator.yaml

      - name: "Install Knative with Istio Controller"
        run: |
          kubectl apply \
            -f https://github.com/knative/serving/releases/download/v${{ env.KNATIVE_VERSION }}/serving-crds.yaml
          kubectl apply \
            -f https://github.com/knative/serving/releases/download/v${{ env.KNATIVE_VERSION }}/serving-core.yaml

          kubectl apply \
            -f https://github.com/knative/net-istio/releases/download/v${{ env.KNATIVE_ISTIO_VERSION }}/net-istio.yaml

          kubectl -n knative-serving patch configmap/config-domain \
            --type merge -p '{"data":{"127.0.0.1.nip.io":""}}'

          kubectl -n knative-serving patch configmap/config-deployment \
            --type merge -p '{"data":{"registriesSkippingTagResolving": "${{ env.LOCAL_REGISTRY }}"}}'

      - name: Log in to the GH Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - run: |
          docker pull ${{ env.REGISTRY }}/gojek/mlp:${{ env.MLP_VERSION }}
          docker tag \
            ${{ env.REGISTRY }}/gojek/mlp:${{ env.MLP_VERSION }} \
            ${{ env.LOCAL_REGISTRY }}/gojek/mlp:${{ env.MLP_VERSION }}

          docker pull gcr.io/knative-samples/helloworld-go
          docker tag \
            gcr.io/knative-samples/helloworld-go \
            ${{ env.LOCAL_REGISTRY }}/knative-samples/helloworld-go

          docker push ${{ env.LOCAL_REGISTRY }}/knative-samples/helloworld-go
          docker push ${{ env.LOCAL_REGISTRY }}/gojek/mlp:${{ env.MLP_VERSION }}

          docker image save \
            --output mlp-${{ env.MLP_VERSION }}.tar \
            ${{ env.LOCAL_REGISTRY }}/gojek/mlp:${{ env.MLP_VERSION }}

      - name: "Deploy 'Hello World' Knative service"
        working-directory: .github/workflows-resources
        run: |
          kubectl apply \
            -f hello.knative.yaml

      - name: "Deploy mockserver"
        working-directory: .github/workflows-resources
        run: |
          kubectl apply \
            -f turing.mockserver.yaml
          kubectl apply \
            -f mockserver.ingress.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: mlp-${{ env.MLP_VERSION }}.tar
          path: mlp-${{ env.MLP_VERSION }}.tar

      - uses: actions/checkout@v2
        with:
          repository: gojek/mlp
          ref: ${{ env.MLP_VERSION }}
          token: ${{ secrets.GH_PAT }}
          path: mlp

      - run: |
          helm install mlp ./mlp/charts/mlp \
            --set mlp.image.registry=${{ env.LOCAL_REGISTRY }} \
            --set mlp.image.repository=gojek/mlp \
            --set mlp.image.tag=${{ env.MLP_VERSION }} \
            --values mlp.helm-values.yaml

          kubectl apply -f .github/workflows-resources/mlp.ingress.yaml

      - uses: jupyterhub/action-k8s-await-workloads@v1
        with:
          workloads: >-
            deployment/mlp,
            deployment/mockserver,
            deployment/hello-world-deployment
          max-restarts: 3

      - run: |
          curl -v http://hello.default.127.0.0.1.nip.io

          curl -v http://mockserver.default.127.0.0.1.nip.io/control

          timeout --foreground 45 bash -c \
            "until curl -v -s --fail http://mlp.127.0.0.1.nip.io/v1/projects; do sleep 2; done"

  publish:
    needs:
      - e2e
    uses: romanwozniak/workflows/.github/workflows/publish.yaml@main
    with:
      mlp_version: v1.4.14




